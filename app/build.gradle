apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    signingConfigs {
//        transsion {
//            keyAlias 'admediation'
//            keyPassword 'admediation'
//            storeFile file('hisavana.kjs')
//            storePassword 'admediation'
//        }

        transsion {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('debug.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        applicationId "com.demo.mediation"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true

        buildConfigField "String","sdk_version","\"${rootProject.ext.SDK_version}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.transsion
        }

        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.transsion
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def releaseType = variant.buildType.name
            def time = new Date().format('yyyyMMdd')
            //lite
            //outputFileName = "Mediation" + "_V" + defaultConfig.versionName + "_" + time + "_" + releaseType + "_lite" + ".apk"
            outputFileName = "Mediation" + "_V" + defaultConfig.versionName + "_" + time + "_" + releaseType + ".apk"
        }
    }

    dexOptions {
        javaMaxHeapSize "4096M"
    }
    //指定jdk版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

//configurations {
//    compile.exclude group: 'androidx.annotation', module: 'annotation'
//}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    resolutionStrategy {
        force 'com.transsion.api:oneid:1.0.0.9'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.21"
    implementation 'androidx.core:core-ktx:1.3.2'
    //  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.10"
    implementation 'com.google.android.material:material:1.4.0'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'

    //lite
    //implementation("com.cloud.hisavana.sdk.mediation:admob-lite-lib:$versionName")
    implementation("com.cloud.hisavana.sdk.mediation:admob-lib:$SDK_version")

    implementation("com.cloud.hisavana.sdk.mediation:fan-lib:$SDK_version")
    implementation("com.cloud.hisavana.sdk.mediation:mediation-lib:$SDK_version")
    implementation("com.cloud.hisavana.sdk.mediation:applovin-lib:$SDK_version")
    implementation("com.cloud.hisavana.sdk.mediation:unity-lib:$SDK_version")
    // 142 新增广告源
    implementation("com.cloud.hisavana.sdk.mediation:ironsource-lib:$SDK_version")
    // 143 新增广告源
    implementation("com.cloud.hisavana.sdk.mediation:vungle-lib:$SDK_version")
    // 143 新增广告源
    implementation("com.cloud.hisavana.sdk.mediation:inmobi-lib:$SDK_version")
    // 202新增广告源
    implementation("com.cloud.hisavana.sdk.mediation:adcolony-lib:$SDK_version")
    implementation("com.cloud.hisavana.sdk.mediation:pangle-lib:$SDK_version")
    implementation("com.cloud.hisavana.sdk.mediation:mintegral-lib:$SDK_version")

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'

    // 列表
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    implementation 'com.squareup.okhttp3:okhttp:4.9.1'

    implementation 'com.transsion.api:oneid:1.0.0.9'

    implementation('androidx.core:core-splashscreen:1.0.0')
            {
                exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
            }


}
/**
 * cope debug apk
 * @author bing.lin@transsion
 */
task debugApk {
    doLast {
        copy {
            def time = new Date().format('yyyyMMdd')
            if ("lite".equals(type)) {
                type = "_lite"
            } else if ("go".equals(type)) {
                type = "_go"
            } else {
                type = ""
            }
            from "./build/outputs/apk/debug/SSP_V${android.defaultConfig.versionName}_${time}_debug${type}.apk"
            into "\\\\192.168.0.78\\file-share\\SDKTeam\\AD\\SSP\\Apks\\V_${android.defaultConfig.versionName}"
        }
    }
}

/**
 * copy release apk
 */
task releaseApk {
    doLast {
        copy {
            def time = new Date().format('yyyyMMdd')
            if ("lite".equals(type)) {
                type = "_lite"
            } else if ("go".equals(type)) {
                type = "_go"
            } else {
                type = ""
            }
            from "./build/outputs/apk/release/SSP_V${android.defaultConfig.versionName}_${time}_release${type}.apk"
            into "\\\\192.168.0.78\\file-share\\SDKTeam\\AD\\SSP\\Apks\\V_${android.defaultConfig.versionName}"
        }
    }
}

project.afterEvaluate {
    releaseApk.dependsOn('assembleRelease')
    debugApk.dependsOn('assembleDebug')
}

/*
*  gradlew app:assembleRelease -Dtype="lite"
* */
